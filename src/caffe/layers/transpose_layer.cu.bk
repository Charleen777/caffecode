#include <algorithm>
#include <vector>

#include "caffe/layer.hpp"
#include "caffe/vision_layers.hpp"

namespace caffe {

template <typename Dtype>
void TransposeLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
    const vector<Blob<Dtype>*>& top) {
  const Dtype* bottom_data = bottom[0]->gpu_data();
  Dtype* top_data = top[0]->mutable_gpu_data();
 switch (this->layer_param_.transpose_param().transposetype()) {
  case TransposeParameter_TransposeType_LSTMINPUT:
	  for (int n = 0; n < bottom[0]->num(); ++n) {
		const int spatial_dim = bottom[0]->width() * bottom[0]->height();
		caffe_gpu_transpose(bottom[0]->channels(), spatial_dim,
		    bottom_data + bottom[0]->offset(n),
		    top_data + top[0]->offset(n * spatial_dim));
	  }
	  break;
   case TransposeParameter_TransposeType_LSTMOUTPUT:
      beforespatialdim = bottom[0]->height() * bottom[0]->width();
      afterspatialdim = bottom[0]->channels() * bottom[0]->height();
	  for (int n = 0; n < bottom[0]->num(); ++n) {
		const int offset = bottom[0]->count() / bottom[0]->num() * n;
		for (int c = 0; c < bottom[0]->channels(); ++c) {
          	     for (int h = 0; h < bottom[0]->height(); ++h){
			  for (int w = 0; w < bottom[0]->width(); ++w) {
				top_data[offset + w* afterspatialdim + c *bottom[0]->channels() + h] = bottom_data[offset + c* beforespatialdim + h *bottom[0]->height() + w];
			  }
	             }
		}
	  }
      break;
  }
}

template <typename Dtype>
void TransposeLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
    const vector<bool>& propagate_down,
    const vector<Blob<Dtype>*>& bottom) {
  /*Backward_cpu(top, propagate_down, bottom);*/
  const Dtype* top_diff = top[0]->gpu_diff();
  Dtype* bottom_diff = bottom[0]->mutable_gpu_diff();
  for (int n = 0; n < bottom[0]->num(); ++n) {
    const int spatial_dim = bottom[0]->width() * bottom[0]->height();
    caffe_gpu_transpose(bottom[0]->width() * bottom[0]->height(),
        bottom[0]->channels(), top_diff + top[0]->offset(n * spatial_dim),
        bottom_diff + bottom[0]->offset(n));
  }
}


INSTANTIATE_LAYER_GPU_FUNCS(TransposeLayer);

}  // namespace caffe
